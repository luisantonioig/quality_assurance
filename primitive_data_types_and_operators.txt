>>> """ Multiline strings can be written
...     using three "s, and are often used
...     as comments
... """
' Multiline strings can be written\n    using three "s, and are often used\n    as comments\n'
>>> 3
3
>>> 1 + 1
2
>>> 8 - 1
7
>>> 10 * 2
20
>>> 35 / 5
7
>>> 5 / 2
2
>>> 2.0
2.0
>>> 11.0 / 4.0
2.75
>>> 5 // 3
1
>>> 5.0 // 3
1.0
>>> -5 // 3
-2
>>> -5.0 // 3.0
-2.0
>>> from __future__import division
  File "<stdin>", line 1
    from __future__import division
                                 ^
SyntaxError: invalid syntax
>>> from __future__ import division
>>> 11 / 4
2.75
>>> 11 // 4
2
>>> 7 % 3
1
>>> 2 ** 4
16
>>> (1 + 3) * 2
8
>>> True and False
False
>>> False or True
True
>>> 0 and 2
0
>>> -5 or 0
-5
>>> 0 == False
True
>>> 2 == True
False
>>> 1 == True
True
>>> not True
False
>>> not False
True
>>> 1 == 1
True
>>> 2 != 1
True
>>> 2 != 1
True
>>> 1 != 1
False
>>> 1 < 10
True
>>> 1 > 10
False
>>> 2 <= 2
True
>>> 2 >= 2
True
>>> 1 < 2 < 3
True
>>> 2 < 3 < 2
False
>>> "This is a string"
'This is a string'
>>> 'This is a string'
'This is a string'
>>> 'This is also a string'
'This is also a string'
>>> "Hello " + "world"
'Hello world'
>>> "Hello " "world"
'Hello world'
>>> "Hello" * 3
'HelloHelloHello'
>>> "This is a string"[0]
'T'
>>> len("This is a string")
16
>>> x = 'apple'
>>> y = 'lemon'
>>> z = "The items in the basket are %s and %s" % (x,y)
>>> z
'The items in the basket are apple and lemon'
>>> "{} is a {}".format("This", "placeholder")
'This is a placeholder'
>>> "{0} can be {1}".format("strings", "formatted")
'strings can be formatted'
>>> "{name} wants to eat {food}".format(name = "Bob", food = "lasagna")
'Bob wants to eat lasagna'
>>> None
>>> "etc" is None
False
>>> None is None
True
>>> bool(0)
False
>>> bool("")
False