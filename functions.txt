>>> def add(x, y):
...     print "x is {0} and y is {1}".format(x, y)
...     return x + y
... 
>>> add(5, 6)
x is 5 and y is 6
11
>>> add(y=6, x=5)
x is 5 and y is 6
11
>>> def varargs(*args):
...     return args
... 
>>> varargs(1, 2, 3) 
(1, 2, 3)
>>> def keyword_args(**kwargs):
...     return kwargs
... 
>>> keyword_args(big="foot", loch="ness")
{'big': 'foot', 'loch': 'ness'}
>>> def all_the_args(*args, **kwargs):
...     print args
...     print kwargs
... 
>>> all_the_args(1, 2, a=3, b=4)
(1, 2)
{'a': 3, 'b': 4}
>>> args = (1, 2, 3, 4)
>>> kwargs = {"a": 3, "b": 4}
>>> all_the_args(*args)
(1, 2, 3, 4)
{}
>>> all_the_args(**kwargs)
()
{'a': 3, 'b': 4}
>>> all_the_args(*args, **kwargs)
(1, 2, 3, 4)
{'a': 3, 'b': 4}
>>> def pass_all_the_args(*args, **kwargs):
...     all_the_args(*args, **kwargs)
...     print varargs(*args)
...     print keyword_args(**kwargs)
... 
>>> x = 5
>>> def set_x(num):
...     x = num
...     print x
... 
>>> def set_global_x(num):
...     global x
...     print x
...     x = num
...     print x
... 
>>> set_x(43)
43
>>> set_global_x(6)
5
6
>>> def create_adder(x):
...     def adder(y):
...         return x + y
...     return adder
... 
>>> add_10 = create_adder(10)
>>> add_10(3)
13
>>> (lambda x: x > 2)(3)
True
>>> (lambda x, y: x ** 2 + y ** 2)(2, 1)
5
>>> map(add_10, [1, 2, 3])
[11, 12, 13]
>>> map(max, [1, 2, 3], [4, 2, 1])
[4, 2, 3]
>>> filter(lambda x: x > 5, [3, 4, 5, 6, 7])
[6, 7]
>>> [add_10(i) for i in [1, 2, 3]]
[11, 12, 13]
>>> [x for x in [3, 4, 5, 6, 7] if x > 5]
[6, 7]
>>> {x for x in 'abcddeef' if x in 'abc'}
set(['a', 'c', 'b'])
>>> {x: x ** 2 for x in range(5)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}